@article{10.1145/3428249,
author = {Turcotte, Alexi and Goel, Aviral and K\v{r}ikava, Filip and Vitek, Jan},
title = {Designing types for R, empirically},
year = {2020},
issue_date = {November 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {OOPSLA},
url = {https://doi.org/10.1145/3428249},
doi = {10.1145/3428249},
abstract = {The R programming language is widely used in a variety of domains. It was designed to favor an interactive style of programming with minimal syntactic and conceptual overhead. This design is well suited to data analysis, but a bad fit for tools such as compilers or program analyzers. In particular, R has no type annotations, and all operations are dynamically checked at run-time. The starting point for our work are the two questions: what expressive power is needed to accurately type R code? and which type system is the R community willing to adopt? Both questions are difficult to answer without actually experimenting with a type system. The goal of this paper is to provide data that can feed into that design process. To this end, we perform a large corpus analysis to gain insights in the degree of polymorphism exhibited by idiomatic R code and explore potential benefits that the R community could accrue from a simple type system. As a starting point, we infer type signatures for 25,215 functions from 412 packages among the most widely used open source R libraries. We then conduct an evaluation on 8,694 clients of these packages, as well as on end-user code from the Kaggle data science competition website.},
journal = {Proc. ACM Program. Lang.},
month = {nov},
articleno = {181},
numpages = {25},
keywords = {type declarations, dynamic languages, R}
}
@misc{towardsdatascienceFunctionalProgramming,
	author = {Joyce Xu},
	title = {{F}unctional programming for deep learning --- towardsdatascience.com},
	howpublished = {\url{https://towardsdatascience.com/functional-programming-for-deep-learning-bc7b80e347e9}},
	year = {2017},
	note = {[Accessed 05-07-2024]},
}
@BOOK{Liu2020-ja,
  title  = {A Type System for Multidimensional Arrays},
  author = {Liu, Theodore},
  year   =  {2020}
}
@InProceedings{10.1007/978-3-642-54833-8_3,
author={Slepak, Justin and Shivers, Olin and Manolios, Panagiotis},
editor={Shao, Zhong},
title={An Array-Oriented Language with Static Rank Polymorphism},
booktitle={Programming Languages and Systems},
year={2014},
publisher={Springer Berlin Heidelberg},
address={Berlin, Heidelberg},
pages={27--46},
abstract={The array-computational model pioneered by Iverson's languages APL and J offers a simple and expressive solution to the ``von Neumann bottleneck.'' It includes a form of rank, or dimensional, polymorphism, which renders much of a program's control structure implicit by lifting base operators to higher-dimensional array structures. We present the first formal semantics for this model, along with the first static type system that captures the full power of the core language.},
isbn={978-3-642-54833-8}
}
@ARTICLE{Loh2010-aw,
  title     = {A tutorial implementation of a dependently typed lambda calculus},
  author    = {LÃ¶h, Andres and McBride, Conor and Swierstra, Wouter},
  journal   = {Fundam. Inform.},
  publisher = {IOS Press},
  volume    =  {102},
  number    =  {2},
  pages     = {177--207},
  year      =  {2010}
}
